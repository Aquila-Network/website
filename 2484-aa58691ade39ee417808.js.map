{"version":3,"file":"2484-aa58691ade39ee417808.js","mappings":"wiBAAA,IAAIA,EAAoB,qBACpBC,EAAqB,qBAErBC,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,EAEfC,EAAsB,WACxBH,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,GAGbE,EAAsB,SAA6BC,GACrDC,EAAqBD,GAEhBA,EAAEE,iBAIPN,EAAwBO,EAAmBH,EAAEE,gBAE7CF,EAAEE,eAAeE,SAAW,WAC1BC,EAAqBL,GAEjBM,KAAqBC,EAAkBP,GACzCQ,EAAgBR,GACPS,EAAiBT,IAC1BU,EAAiBV,MAKnBC,EAAuB,SAA8BD,GACvDA,EAAEW,iBAAiB,mBAAmB,SAAUC,GAC9C,OAAOJ,EAAgBR,EAAGY,MAE5BZ,EAAEW,iBAAiB,mBAAmB,WACpC,OAAOD,EAAiBV,OAIxBQ,EAAkB,SAAyBR,EAAGY,GAChDC,EAAsBb,EAAGY,GACzBf,GAAe,GAGba,EAAmB,SAA0BV,GAC/Cc,EAAuBd,GACvBH,GAAe,GAGbS,EAAkB,WACpB,IAAIN,GAAKL,EAAuBoB,OAASnB,EAAsBmB,QAAUnB,EAAsBoB,MAC/F,OAAQnB,GAAgBF,EAAuBsB,QAAUrB,EAAsBqB,OAASjB,EApDjE,KAuDrBO,EAAoB,SAA2BP,GACjD,OAAOH,IAAiBY,EAAiBT,IAGvCS,EAAmB,SAA0BT,GAC/C,OAAOH,GAAgBD,EAAsBmB,SAAWf,EAAEkB,aAGxDL,EAAwB,SAA+Bb,EAAGY,GAC5D,IAAIO,EAAIP,EAAIA,EAAEQ,eAAiBpB,EAAEkB,YAActB,EAAsBmB,OACjEM,EAAI,IAAIC,YAAY7B,EAAmB,CACzC8B,OAAQ,CACNH,eAAgBD,KAGpBnB,EAAEwB,cAAcH,IAGdP,EAAyB,SAAgCd,GAC3D,IAAIY,EAAI,IAAIU,YAAY5B,GACxBM,EAAEwB,cAAcZ,IAGdP,EAAuB,SAA8BL,GACvDL,EAAyB8B,OAAOC,OAAO,GAAI9B,GAC3CA,EAAwBO,EAAmBH,EAAEE,iBAG3CC,EAAqB,SAA4BH,GACnD,MAAO,CACLiB,MAAOU,KAAKC,MAAM5B,EAAEiB,OACpBF,OAAQY,KAAKC,MAAM5B,EAAEe,QACrBc,UAAW7B,EAAE6B,UACbC,WAAY9B,EAAE8B,WACdC,QAAS/B,EAAE+B,QACXC,SAAUhC,EAAEgC,SACZhB,MAAOhB,EAAEgB","sources":["webpack://website/./node_modules/@ionic/core/dist/esm-es5/keyboard-5742b5da.js"],"sourcesContent":["var KEYBOARD_DID_OPEN = \"ionKeyboardDidShow\";\nvar KEYBOARD_DID_CLOSE = \"ionKeyboardDidHide\";\nvar KEYBOARD_THRESHOLD = 150;\nvar previousVisualViewport = {};\nvar currentVisualViewport = {};\nvar keyboardOpen = false;\n\nvar resetKeyboardAssist = function resetKeyboardAssist() {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\n\nvar startKeyboardAssist = function startKeyboardAssist(e) {\n  startNativeListeners(e);\n\n  if (!e.visualViewport) {\n    return;\n  }\n\n  currentVisualViewport = copyVisualViewport(e.visualViewport);\n\n  e.visualViewport.onresize = function () {\n    trackViewportChanges(e);\n\n    if (keyboardDidOpen() || keyboardDidResize(e)) {\n      setKeyboardOpen(e);\n    } else if (keyboardDidClose(e)) {\n      setKeyboardClose(e);\n    }\n  };\n};\n\nvar startNativeListeners = function startNativeListeners(e) {\n  e.addEventListener(\"keyboardDidShow\", function (r) {\n    return setKeyboardOpen(e, r);\n  });\n  e.addEventListener(\"keyboardDidHide\", function () {\n    return setKeyboardClose(e);\n  });\n};\n\nvar setKeyboardOpen = function setKeyboardOpen(e, r) {\n  fireKeyboardOpenEvent(e, r);\n  keyboardOpen = true;\n};\n\nvar setKeyboardClose = function setKeyboardClose(e) {\n  fireKeyboardCloseEvent(e);\n  keyboardOpen = false;\n};\n\nvar keyboardDidOpen = function keyboardDidOpen() {\n  var e = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && e > KEYBOARD_THRESHOLD;\n};\n\nvar keyboardDidResize = function keyboardDidResize(e) {\n  return keyboardOpen && !keyboardDidClose(e);\n};\n\nvar keyboardDidClose = function keyboardDidClose(e) {\n  return keyboardOpen && currentVisualViewport.height === e.innerHeight;\n};\n\nvar fireKeyboardOpenEvent = function fireKeyboardOpenEvent(e, r) {\n  var t = r ? r.keyboardHeight : e.innerHeight - currentVisualViewport.height;\n  var i = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight: t\n    }\n  });\n  e.dispatchEvent(i);\n};\n\nvar fireKeyboardCloseEvent = function fireKeyboardCloseEvent(e) {\n  var r = new CustomEvent(KEYBOARD_DID_CLOSE);\n  e.dispatchEvent(r);\n};\n\nvar trackViewportChanges = function trackViewportChanges(e) {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(e.visualViewport);\n};\n\nvar copyVisualViewport = function copyVisualViewport(e) {\n  return {\n    width: Math.round(e.width),\n    height: Math.round(e.height),\n    offsetTop: e.offsetTop,\n    offsetLeft: e.offsetLeft,\n    pageTop: e.pageTop,\n    pageLeft: e.pageLeft,\n    scale: e.scale\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","e","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","r","fireKeyboardOpenEvent","fireKeyboardCloseEvent","height","scale","width","innerHeight","t","keyboardHeight","i","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"sourceRoot":""}